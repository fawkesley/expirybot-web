# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-09-26 10:30
from __future__ import unicode_literals

from django.db import migrations
from django.conf import settings

import requests
import re


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    SearchResultForKeysByEmail = apps.get_model("users", "SearchResultForKeysByEmail")
    db_alias = schema_editor.connection.alias

    for result in SearchResultForKeysByEmail.objects.using(db_alias).filter(key_fingerprints__len__gt=0):
        new_key_fingerprints = set()

        for fingerprint in result.key_fingerprints:
            if validate_fingerprint(fingerprint):
                new_key_fingerprints.add(fingerprint)

            else:
                valid_fingerprint = try_find_long_fingerprint(fingerprint)
                if valid_fingerprint is not None:
                    new_key_fingerprints.add(valid_fingerprint)

        if set(result.key_fingerprints) != new_key_fingerprints:
            print("{} {} -> {}".format(result.email_address.email_address, result.key_fingerprints, list(new_key_fingerprints)))

            result.key_fingerprints = list(new_key_fingerprints)
            result.save()


def reverse_func(apps, schema_editor):
    # it's a data fix, ther'es no way of reversing
    pass


def try_find_long_fingerprint(short_fingerprint):
    response = requests.get(
        '{}/pks/lookup'.format(settings.KEYSERVER_URL),
        params={
            'op': 'vindex',
            'option': 'json',
            'search': "0x{}".format(short_fingerprint),
        },
        timeout=5
    )

    try:
        response.raise_for_status()
    except requests.HTTPError:
        if response.status_code == 404 and 'Not Found' in response.text:
            print("Keyserver returned 'Not Found' for this search")
            return None
        raise

    return parse_json_vindex_for_single_fingerprint(response.json())


def parse_json_vindex_for_single_fingerprint(json_data):
    for item in json_data:
        fingerprint = item['fingerprint'].upper()
        if validate_fingerprint(fingerprint):
            return fingerprint

    return None


def validate_fingerprint(fingerprint):
    return (
        re.match('^[A-F0-9]{40}$', fingerprint)
    )


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0012_search_result_for_keys_by_email_datetime_not_automatic'),
    ]

    operations = [
            migrations.RunPython(forwards_func, reverse_func),
    ]
